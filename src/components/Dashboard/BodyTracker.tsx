import React, { useState, useEffect } from 'react';
import { 
  Dumbbell, 
  Plus, 
  Check, 
  X, 
  TrendingUp, 
  Target, 
  Scale, 
  Activity,
  Apple,
  Flame,
  Calendar,
  Clock,
  Edit2,
  Save,
  Trash2,
  Calculator,
  Info,
  User,
  Zap
} from 'lucide-react';
import { useNotifications } from '../../hooks/useNotifications';

interface WorkoutItem {
  id: string;
  name: string;
  completed: boolean;
  date: string;
  duration?: number; // in minutes
  reps?: number;
  sets?: number;
  caloriesBurned?: number;
}

interface CalorieEntry {
  id: string;
  type: 'in' | 'out';
  category: string;
  amount: number;
  description: string;
  date: string;
  isAutoGenerated?: boolean;
}

interface WeightEntry {
  id: string;
  weight: number;
  bodyFat?: number;
  date: string;
}

interface UserProfile {
  age: number;
  gender: 'male' | 'female';
  height: number; // in cm
  weight: number; // in kg
  activityLevel: 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';
}

interface FitnessGoal {
  targetWeight: number;
  currentWeight: number;
  mode: 'cutting' | 'bulking' | 'maintenance';
  lastUpdate: string;
}

interface CalorieGoals {
  bmr: number;
  tdee: number;
  dailyCalorieGoal: number;
  proteinGoal: number;
  carbGoal: number;
  fatGoal: number;
}

// Exercise calorie database (per minute or per rep)
const EXERCISE_DATABASE = {
  // Cardio (kcal per minute for 70kg person)
  'jogging': { type: 'duration', caloriesPerUnit: 10, unit: 'minute' },
  'running': { type: 'duration', caloriesPerUnit: 15, unit: 'minute' },
  'walking': { type: 'duration', caloriesPerUnit: 4, unit: 'minute' },
  'cycling': { type: 'duration', caloriesPerUnit: 8, unit: 'minute' },
  'swimming': { type: 'duration', caloriesPerUnit: 12, unit: 'minute' },
  'dancing': { type: 'duration', caloriesPerUnit: 6, unit: 'minute' },
  'hiking': { type: 'duration', caloriesPerUnit: 7, unit: 'minute' },
  
  // Strength Training (kcal per rep for 70kg person)
  'push-up': { type: 'reps', caloriesPerUnit: 0.5, unit: 'rep' },
  'pull-up': { type: 'reps', caloriesPerUnit: 1.0, unit: 'rep' },
  'squat': { type: 'reps', caloriesPerUnit: 0.4, unit: 'rep' },
  'burpee': { type: 'reps', caloriesPerUnit: 1.5, unit: 'rep' },
  'jumping jack': { type: 'reps', caloriesPerUnit: 0.2, unit: 'rep' },
  'mountain climber': { type: 'reps', caloriesPerUnit: 0.3, unit: 'rep' },
  'lunge': { type: 'reps', caloriesPerUnit: 0.4, unit: 'rep' },
  'sit-up': { type: 'reps', caloriesPerUnit: 0.2, unit: 'rep' },
  
  // Time-based strength (kcal per minute)
  'plank': { type: 'duration', caloriesPerUnit: 3, unit: 'minute' },
  'wall sit': { type: 'duration', caloriesPerUnit: 4, unit: 'minute' },
  'yoga': { type: 'duration', caloriesPerUnit: 3, unit: 'minute' },
  'stretching': { type: 'duration', caloriesPerUnit: 2, unit: 'minute' },
};

const BodyTracker: React.FC = () => {
  const { showSuccess, showError, showConfirmation, showInfo } = useNotifications();
  
  // User Profile State
  const [userProfile, setUserProfile] = useState<UserProfile>({
    age: 25,
    gender: 'male',
    height: 170,
    weight: 70,
    activityLevel: 'moderate'
  });

  // Calorie Goals State
  const [calorieGoals, setCalorieGoals] = useState<CalorieGoals>({
    bmr: 0,
    tdee: 0,
    dailyCalorieGoal: 0,
    proteinGoal: 0,
    carbGoal: 0,
    fatGoal: 0
  });

  const [workouts, setWorkouts] = useState<WorkoutItem[]>([
    { id: '1', name: 'Push-up', completed: true, date: '2024-01-15', reps: 15, sets: 3, caloriesBurned: 22.5 },
    { id: '2', name: 'Jogging', completed: true, date: '2024-01-15', duration: 20, caloriesBurned: 200 },
    { id: '3', name: 'Plank', completed: false, date: '2024-01-15', duration: 1 },
    { id: '4', name: 'Squat', completed: true, date: '2024-01-15', reps: 20, sets: 3, caloriesBurned: 24 },
    { id: '5', name: 'Pull-up', completed: false, date: '2024-01-15', reps: 8, sets: 2 }
  ]);

  const [caloriesIn, setCaloriesIn] = useState<CalorieEntry[]>([
    { id: '1', type: 'in', category: 'Sarapan', amount: 450, description: 'Nasi gudeg + teh', date: '2024-01-15' },
    { id: '2', type: 'in', category: 'Makan Siang', amount: 650, description: 'Ayam bakar + nasi', date: '2024-01-15' },
    { id: '3', type: 'in', category: 'Snack', amount: 200, description: 'Pisang + kacang', date: '2024-01-15' }
  ]);

  const [caloriesOut, setCaloriesOut] = useState<CalorieEntry[]>([]);

  const [weightEntries, setWeightEntries] = useState<WeightEntry[]>([
    { id: '1', weight: 72.5, bodyFat: 18.2, date: '2024-01-15' },
    { id: '2', weight: 72.8, bodyFat: 18.5, date: '2024-01-14' },
    { id: '3', weight: 73.1, bodyFat: 18.8, date: '2024-01-13' },
    { id: '4', weight: 73.0, bodyFat: 18.6, date: '2024-01-12' },
    { id: '5', weight: 73.3, bodyFat: 19.0, date: '2024-01-11' },
    { id: '6', weight: 73.5, bodyFat: 19.2, date: '2024-01-10' },
    { id: '7', weight: 73.8, bodyFat: 19.5, date: '2024-01-09' }
  ]);

  const [fitnessGoal, setFitnessGoal] = useState<FitnessGoal>({
    targetWeight: 70.0,
    currentWeight: 72.5,
    mode: 'cutting',
    lastUpdate: '2024-01-15'
  });

  // Modal states
  const [showAddWorkout, setShowAddWorkout] = useState(false);
  const [showAddMeal, setShowAddMeal] = useState(false);
  const [showAddWeight, setShowAddWeight] = useState(false);
  const [showEditGoal, setShowEditGoal] = useState(false);
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [showCalorieInfo, setShowCalorieInfo] = useState(false);
  
  // Form states
  const [editingWorkout, setEditingWorkout] = useState<WorkoutItem | null>(null);
  const [editingMeal, setEditingMeal] = useState<CalorieEntry | null>(null);
  const [editingWeight, setEditingWeight] = useState<WeightEntry | null>(null);
  const [newWorkout, setNewWorkout] = useState({ name: '', duration: '', reps: '', sets: '' });
  const [newMeal, setNewMeal] = useState({ category: 'Sarapan', amount: '', description: '' });
  const [newWeight, setNewWeight] = useState({ weight: '', bodyFat: '' });

  // Calculate BMR using Mifflin-St Jeor Equation
  const calculateBMR = (profile: UserProfile): number => {
    const { weight, height, age, gender } = profile;
    
    if (gender === 'male') {
      return (10 * weight) + (6.25 * height) - (5 * age) + 5;
    } else {
      return (10 * weight) + (6.25 * height) - (5 * age) - 161;
    }
  };

  // Calculate TDEE (Total Daily Energy Expenditure)
  const calculateTDEE = (bmr: number, activityLevel: string): number => {
    const activityMultipliers = {
      sedentary: 1.2,      // Little/no exercise
      light: 1.375,        // Light exercise 1-3 days/week
      moderate: 1.55,      // Moderate exercise 3-5 days/week
      active: 1.725,       // Hard exercise 6-7 days/week
      very_active: 1.9     // Very hard exercise, physical job
    };
    
    return bmr * (activityMultipliers[activityLevel as keyof typeof activityMultipliers] || 1.55);
  };

  // Calculate daily calorie goal based on fitness goal
  const calculateDailyCalorieGoal = (tdee: number, mode: string): number => {
    switch (mode) {
      case 'cutting':
        return tdee - 500; // 500 calorie deficit for ~0.5kg/week weight loss
      case 'bulking':
        return tdee + 300; // 300 calorie surplus for lean muscle gain
      case 'maintenance':
      default:
        return tdee;
    }
  };

  // Calculate macronutrient goals
  const calculateMacroGoals = (dailyCalories: number, mode: string) => {
    let proteinRatio, carbRatio, fatRatio;
    
    switch (mode) {
      case 'cutting':
        proteinRatio = 0.35; // Higher protein for muscle preservation
        fatRatio = 0.25;
        carbRatio = 0.40;
        break;
      case 'bulking':
        proteinRatio = 0.25;
        fatRatio = 0.25;
        carbRatio = 0.50; // Higher carbs for energy
        break;
      case 'maintenance':
      default:
        proteinRatio = 0.30;
        fatRatio = 0.25;
        carbRatio = 0.45;
        break;
    }
    
    return {
      proteinGoal: Math.round((dailyCalories * proteinRatio) / 4), // 4 kcal per gram
      carbGoal: Math.round((dailyCalories * carbRatio) / 4),       // 4 kcal per gram
      fatGoal: Math.round((dailyCalories * fatRatio) / 9)          // 9 kcal per gram
    };
  };

  // Calculate calories burned for exercise
  const calculateCaloriesBurned = (exerciseName: string, duration?: number, reps?: number, sets?: number, userWeight: number = 70): number => {
    const exercise = EXERCISE_DATABASE[exerciseName.toLowerCase() as keyof typeof EXERCISE_DATABASE];
    if (!exercise) return 0;

    const weightFactor = userWeight / 70; // Adjust for user's weight (base: 70kg)
    
    if (exercise.type === 'duration' && duration) {
      return Math.round(exercise.caloriesPerUnit * duration * weightFactor);
    } else if (exercise.type === 'reps' && reps) {
      const totalReps = sets ? reps * sets : reps;
      return Math.round(exercise.caloriesPerUnit * totalReps * weightFactor * 10) / 10;
    }
    
    return 0;
  };

  // Update calorie goals when profile changes
  useEffect(() => {
    const currentWeight = weightEntries.length > 0 ? weightEntries[0].weight : userProfile.weight;
    const profileWithCurrentWeight = { ...userProfile, weight: currentWeight };
    
    const bmr = calculateBMR(profileWithCurrentWeight);
    const tdee = calculateTDEE(bmr, userProfile.activityLevel);
    const dailyCalorieGoal = calculateDailyCalorieGoal(tdee, fitnessGoal.mode);
    const macros = calculateMacroGoals(dailyCalorieGoal, fitnessGoal.mode);
    
    setCalorieGoals({
      bmr: Math.round(bmr),
      tdee: Math.round(tdee),
      dailyCalorieGoal: Math.round(dailyCalorieGoal),
      ...macros
    });
  }, [userProfile, weightEntries, fitnessGoal.mode]);

  // Generate calories out from completed workouts
  useEffect(() => {
    const autoGeneratedCalories: CalorieEntry[] = workouts
      .filter(workout => workout.completed && workout.caloriesBurned)
      .map(workout => ({
        id: `auto-${workout.id}`,
        type: 'out' as const,
        category: 'Workout',
        amount: workout.caloriesBurned!,
        description: workout.name,
        date: workout.date,
        isAutoGenerated: true
      }));
    
    // Keep manual entries and add auto-generated ones
    const manualEntries = caloriesOut.filter(entry => !entry.isAutoGenerated);
    setCaloriesOut([...manualEntries, ...autoGeneratedCalories]);
  }, [workouts]);

  // Calculate statistics
  const completedWorkouts = workouts.filter(w => w.completed).length;
  const totalWorkouts = workouts.length;
  const workoutProgress = totalWorkouts > 0 ? Math.round((completedWorkouts / totalWorkouts) * 100) : 0;

  const totalCaloriesIn = caloriesIn.reduce((sum, entry) => sum + entry.amount, 0);
  const totalCaloriesOut = caloriesOut.reduce((sum, entry) => sum + entry.amount, 0);
  const calorieBalance = totalCaloriesIn - totalCaloriesOut;
  const remainingCalories = calorieGoals.dailyCalorieGoal - totalCaloriesIn;

  const currentWeight = weightEntries.length > 0 ? weightEntries[0].weight : fitnessGoal.currentWeight;
  const weightChange = weightEntries.length >= 2 ? 
    Number((weightEntries[0].weight - weightEntries[6]?.weight || 0).toFixed(1)) : 0;

  const weeklyWorkouts = workouts.filter(w => w.completed).length;

  // Handle functions
  const toggleWorkout = (id: string) => {
    const workout = workouts.find(w => w.id === id);
    if (!workout) return;

    const updatedWorkout = { ...workout, completed: !workout.completed };
    
    // Calculate calories if completing workout
    if (!workout.completed) {
      const caloriesBurned = calculateCaloriesBurned(
        workout.name, 
        workout.duration, 
        workout.reps, 
        workout.sets, 
        currentWeight
      );
      updatedWorkout.caloriesBurned = caloriesBurned;
    } else {
      updatedWorkout.caloriesBurned = undefined;
    }

    setWorkouts(workouts.map(w => 
      w.id === id ? updatedWorkout : w
    ));

    if (!workout.completed) {
      const caloriesText = updatedWorkout.caloriesBurned ? ` (${updatedWorkout.caloriesBurned} kcal terbakar)` : '';
      showSuccess('Workout Selesai! 💪', `${workout.name} berhasil diselesaikan!${caloriesText}`);
    }
  };

  const editWorkout = (workout: WorkoutItem) => {
    setEditingWorkout(workout);
    setNewWorkout({
      name: workout.name,
      duration: workout.duration?.toString() || '',
      reps: workout.reps?.toString() || '',
      sets: workout.sets?.toString() || ''
    });
    setShowAddWorkout(true);
  };

  const updateWorkout = () => {
    if (!editingWorkout || !newWorkout.name.trim()) return;
    
    const updatedWorkout = {
      ...editingWorkout,
      name: newWorkout.name.trim(),
      duration: newWorkout.duration ? parseInt(newWorkout.duration) : undefined,
      reps: newWorkout.reps ? parseInt(newWorkout.reps) : undefined,
      sets: newWorkout.sets ? parseInt(newWorkout.sets) : undefined
    };

    // Recalculate calories if workout is completed
    if (updatedWorkout.completed) {
      updatedWorkout.caloriesBurned = calculateCaloriesBurned(
        updatedWorkout.name,
        updatedWorkout.duration,
        updatedWorkout.reps,
        updatedWorkout.sets,
        currentWeight
      );
    }
    
    setWorkouts(workouts.map(workout => 
      workout.id === editingWorkout.id ? updatedWorkout : workout
    ));
    setEditingWorkout(null);
    setNewWorkout({ name: '', duration: '', reps: '', sets: '' });
    setShowAddWorkout(false);
    showSuccess('Workout Diperbarui', 'Workout berhasil diperbarui!');
  };

  const deleteWorkout = async (id: string) => {
    const workout = workouts.find(w => w.id === id);
    if (!workout) return;

    showConfirmation(
      'Hapus Workout',
      `Apakah Anda yakin ingin menghapus "${workout.name}"?`,
      () => {
        setWorkouts(workouts.filter(w => w.id !== id));
        showSuccess('Workout Dihapus', 'Workout berhasil dihapus dari daftar');
      },
      {
        confirmText: 'Hapus',
        cancelText: 'Batal',
        type: 'danger'
      }
    );
  };

  const addWorkout = () => {
    if (!newWorkout.name.trim()) return;
    
    const workout: WorkoutItem = {
      id: Date.now().toString(),
      name: newWorkout.name.trim(),
      completed: false,
      date: new Date().toISOString().split('T')[0],
      duration: newWorkout.duration ? parseInt(newWorkout.duration) : undefined,
      reps: newWorkout.reps ? parseInt(newWorkout.reps) : undefined,
      sets: newWorkout.sets ? parseInt(newWorkout.sets) : undefined
    };
    
    setWorkouts([...workouts, workout]);
    setNewWorkout({ name: '', duration: '', reps: '', sets: '' });
    setShowAddWorkout(false);
    showSuccess('Workout Ditambahkan', `${workout.name} berhasil ditambahkan ke daftar!`);
  };

  const editMeal = (meal: CalorieEntry) => {
    setEditingMeal(meal);
    setNewMeal({
      category: meal.category,
      amount: meal.amount.toString(),
      description: meal.description
    });
    setShowAddMeal(true);
  };

  const updateMeal = () => {
    if (!editingMeal || !newMeal.description.trim() || !newMeal.amount) return;
    
    setCaloriesIn(caloriesIn.map(meal => 
      meal.id === editingMeal.id 
        ? { 
            ...meal, 
            category: newMeal.category,
            amount: parseInt(newMeal.amount),
            description: newMeal.description.trim()
          }
        : meal
    ));
    setEditingMeal(null);
    setNewMeal({ category: 'Sarapan', amount: '', description: '' });
    setShowAddMeal(false);
    showSuccess('Makanan Diperbarui', 'Data makanan berhasil diperbarui!');
  };

  const deleteMeal = async (id: string) => {
    const meal = caloriesIn.find(m => m.id === id);
    if (!meal) return;

    showConfirmation(
      'Hapus Makanan',
      `Apakah Anda yakin ingin menghapus "${meal.description}" dari ${meal.category}?`,
      () => {
        setCaloriesIn(caloriesIn.filter(m => m.id !== id));
        showSuccess('Makanan Dihapus', 'Data makanan berhasil dihapus');
      },
      {
        confirmText: 'Hapus',
        cancelText: 'Batal',
        type: 'danger'
      }
    );
  };

  const addMeal = () => {
    if (!newMeal.description.trim() || !newMeal.amount) return;
    
    const meal: CalorieEntry = {
      id: Date.now().toString(),
      type: 'in',
      category: newMeal.category,
      amount: parseInt(newMeal.amount),
      description: newMeal.description.trim(),
      date: new Date().toISOString().split('T')[0]
    };
    
    setCaloriesIn([...caloriesIn, meal]);
    setNewMeal({ category: 'Sarapan', amount: '', description: '' });
    setShowAddMeal(false);
    showSuccess('Makanan Ditambahkan', `${meal.description} (${meal.amount} kcal) berhasil ditambahkan!`);
  };

  const editWeight = (weight: WeightEntry) => {
    setEditingWeight(weight);
    setNewWeight({
      weight: weight.weight.toString(),
      bodyFat: weight.bodyFat?.toString() || ''
    });
    setShowAddWeight(true);
  };

  const updateWeight = () => {
    if (!editingWeight || !newWeight.weight) return;
    
    setWeightEntries(weightEntries.map(weight => 
      weight.id === editingWeight.id 
        ? { 
            ...weight, 
            weight: parseFloat(newWeight.weight),
            bodyFat: newWeight.bodyFat ? parseFloat(newWeight.bodyFat) : undefined
          }
        : weight
    ));
    setEditingWeight(null);
    setNewWeight({ weight: '', bodyFat: '' });
    setShowAddWeight(false);
    showSuccess('Data Berat Diperbarui', 'Data berat badan berhasil diperbarui!');
  };

  const deleteWeight = async (id: string) => {
    const weight = weightEntries.find(w => w.id === id);
    if (!weight) return;

    showConfirmation(
      'Hapus Data Berat',
      `Apakah Anda yakin ingin menghapus data berat ${weight.weight} kg pada ${new Date(weight.date).toLocaleDateString('id-ID')}?`,
      () => {
        setWeightEntries(weightEntries.filter(w => w.id !== id));
        showSuccess('Data Berat Dihapus', 'Data berat badan berhasil dihapus');
      },
      {
        confirmText: 'Hapus',
        cancelText: 'Batal',
        type: 'danger'
      }
    );
  };

  const addWeight = () => {
    if (!newWeight.weight) return;
    
    const weight: WeightEntry = {
      id: Date.now().toString(),
      weight: parseFloat(newWeight.weight),
      bodyFat: newWeight.bodyFat ? parseFloat(newWeight.bodyFat) : undefined,
      date: new Date().toISOString().split('T')[0]
    };
    
    setWeightEntries([weight, ...weightEntries]);
    setNewWeight({ weight: '', bodyFat: '' });
    setShowAddWeight(false);
    showSuccess('Data Berat Ditambahkan', `Berat ${weight.weight} kg berhasil dicatat!`);
  };

  const updateGoal = () => {
    setFitnessGoal({
      ...fitnessGoal,
      currentWeight: currentWeight,
      lastUpdate: new Date().toISOString().split('T')[0]
    });
    setShowEditGoal(false);
    showSuccess('Goal Diperbarui', 'Target fitness Anda berhasil diperbarui!');
  };

  const updateProfile = () => {
    setShowEditProfile(false);
    showSuccess('Profil Diperbarui', 'Data profil Anda berhasil diperbarui!');
  };

  const cancelEdit = () => {
    setEditingWorkout(null);
    setEditingMeal(null);
    setEditingWeight(null);
    setNewWorkout({ name: '', duration: '', reps: '', sets: '' });
    setNewMeal({ category: 'Sarapan', amount: '', description: '' });
    setNewWeight({ weight: '', bodyFat: '' });
    setShowAddWorkout(false);
    setShowAddMeal(false);
    setShowAddWeight(false);
  };

  const getCalorieStatus = () => {
    if (remainingCalories > 200) return { status: 'under', color: 'text-blue-600', message: 'Masih bisa makan' };
    if (remainingCalories > 0) return { status: 'good', color: 'text-green-600', message: 'Target tercapai' };
    if (remainingCalories > -200) return { status: 'over', color: 'text-orange-600', message: 'Sedikit berlebih' };
    return { status: 'way_over', color: 'text-red-600', message: 'Berlebihan' };
  };

  const calorieStatus = getCalorieStatus();

  return (
    <div className="space-y-6">
      {/* Breadcrumbs */}
      <nav className="breadcrumbs">
        <span>Dashboard</span>
        <span className="breadcrumb-separator">/</span>
        <span className="text-gray-900 font-medium">Body</span>
      </nav>

      {/* 🔥 CALORIE GOALS DASHBOARD */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-red-500 rounded-xl flex items-center justify-center">
              <Flame className="w-4 h-4 text-white" />
            </div>
            <div>
              <h2 className="card-title">Calorie Goals Dashboard</h2>
              <p className="text-xs text-gray-500">BMR: {calorieGoals.bmr} | TDEE: {calorieGoals.tdee} kcal</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowCalorieInfo(true)}
              className="btn-icon-secondary"
              title="Calorie Info"
            >
              <Calculator className="w-4 h-4" />
            </button>
            <button
              onClick={() => setShowEditProfile(true)}
              className="btn-icon-secondary"
              title="Edit Profile"
            >
              <User className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Calorie Summary */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <div className="p-3 bg-blue-50 rounded-xl border border-blue-200">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-blue-700">Target Harian</span>
              <Target className="w-4 h-4 text-blue-600" />
            </div>
            <div className="text-xl font-bold text-blue-600">{calorieGoals.dailyCalorieGoal}</div>
            <div className="text-xs text-blue-600">kcal</div>
          </div>
          
          <div className="p-3 bg-green-50 rounded-xl border border-green-200">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-green-700">Kalori Masuk</span>
              <Apple className="w-4 h-4 text-green-600" />
            </div>
            <div className="text-xl font-bold text-green-600">{totalCaloriesIn}</div>
            <div className="text-xs text-green-600">kcal</div>
          </div>
          
          <div className="p-3 bg-orange-50 rounded-xl border border-orange-200">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-orange-700">Kalori Keluar</span>
              <Flame className="w-4 h-4 text-orange-600" />
            </div>
            <div className="text-xl font-bold text-orange-600">{totalCaloriesOut}</div>
            <div className="text-xs text-orange-600">kcal</div>
          </div>
          
          <div className="p-3 bg-purple-50 rounded-xl border border-purple-200">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-purple-700">Sisa Kalori</span>
              <Zap className="w-4 h-4 text-purple-600" />
            </div>
            <div className={`text-xl font-bold ${calorieStatus.color}`}>{Math.abs(remainingCalories)}</div>
            <div className={`text-xs ${calorieStatus.color}`}>{calorieStatus.message}</div>
          </div>
        </div>

        {/* Calorie Progress Bar */}
        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">Progress Kalori Harian</span>
            <span className={`text-sm font-medium ${calorieStatus.color}`}>
              {Math.round((totalCaloriesIn / calorieGoals.dailyCalorieGoal) * 100)}%
            </span>
          </div>
          <div className="progress-bar">
            <div 
              className={`progress-fill ${
                remainingCalories > 0 ? 'progress-fill-success' : 'progress-fill-error'
              }`}
              style={{ width: `${Math.min((totalCaloriesIn / calorieGoals.dailyCalorieGoal) * 100, 100)}%` }}
            ></div>
          </div>
        </div>

        {/* Macronutrient Goals */}
        <div className="p-3 bg-gray-50 rounded-xl border border-gray-200">
          <h4 className="text-sm font-medium text-gray-700 mb-2">Target Makronutrien Harian</h4>
          <div className="grid grid-cols-3 gap-4 text-xs">
            <div className="text-center">
              <div className="font-medium text-red-600">{calorieGoals.proteinGoal}g</div>
              <div className="text-gray-500">Protein</div>
            </div>
            <div className="text-center">
              <div className="font-medium text-yellow-600">{calorieGoals.carbGoal}g</div>
              <div className="text-gray-500">Karbohidrat</div>
            </div>
            <div className="text-center">
              <div className="font-medium text-blue-600">{calorieGoals.fatGoal}g</div>
              <div className="text-gray-500">Lemak</div>
            </div>
          </div>
        </div>
      </div>

      {/* 💪 WORKOUT CHECKLIST */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-blue-500 rounded-xl flex items-center justify-center">
              <Dumbbell className="w-4 h-4 text-white" />
            </div>
            <div>
              <h2 className="card-title">Workout Checklist</h2>
              <p className="text-xs text-gray-500">{completedWorkouts} dari {totalWorkouts} selesai</p>
            </div>
          </div>
          <button
            onClick={() => setShowAddWorkout(true)}
            className="btn-primary"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Workout
          </button>
        </div>

        {/* Progress Bar */}
        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">Progress Hari Ini</span>
            <span className="text-sm text-gray-600">{workoutProgress}%</span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill progress-fill-success" 
              style={{ width: `${workoutProgress}%` }}
            ></div>
          </div>
        </div>

        {/* Workout List */}
        <div className="space-y-2">
          {workouts.map((workout, index) => (
            <div
              key={workout.id}
              className={`p-3 border rounded-xl transition-all duration-200 hover-lift ${
                workout.completed
                  ? 'bg-green-50 border-green-200'
                  : 'bg-white border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3 flex-1">
                  <button
                    onClick={() => toggleWorkout(workout.id)}
                    className={`w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all duration-200 hover-scale ${
                      workout.completed
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'border-gray-300 hover:border-green-500'
                    }`}
                  >
                    {workout.completed && <Check className="w-3 h-3" />}
                  </button>
                  <div className="flex-1">
                    <span className={`text-sm font-medium ${workout.completed ? 'text-gray-500 line-through' : 'text-gray-900'}`}>
                      {workout.name}
                    </span>
                    <div className="flex items-center space-x-2 mt-1">
                      {workout.duration && (
                        <span className="text-xs text-gray-500">{workout.duration} menit</span>
                      )}
                      {workout.reps && (
                        <span className="text-xs text-gray-500">{workout.reps} reps</span>
                      )}
                      {workout.sets && (
                        <span className="text-xs text-gray-500">{workout.sets} set</span>
                      )}
                      {workout.caloriesBurned && (
                        <span className="text-xs text-orange-600 font-medium">🔥 {workout.caloriesBurned} kcal</span>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Action Buttons */}
                <div className="flex items-center space-x-1 ml-3">
                  <button
                    onClick={() => editWorkout(workout)}
                    className="p-1.5 text-blue-500 hover:bg-blue-50 rounded-lg transition-all duration-200 hover-scale"
                    title="Edit workout"
                  >
                    <Edit2 className="w-3 h-3" />
                  </button>
                  <button
                    onClick={() => deleteWorkout(workout.id)}
                    className="p-1.5 text-red-500 hover:bg-red-50 rounded-lg transition-all duration-200 hover-scale"
                    title="Delete workout"
                  >
                    <Trash2 className="w-3 h-3" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Add/Edit Workout Modal */}
        {showAddWorkout && (
          <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl shadow-xl max-w-md w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  {editingWorkout ? 'Edit Workout' : 'Add New Workout'}
                </h3>
                <div className="space-y-3">
                  <input
                    type="text"
                    value={newWorkout.name}
                    onChange={(e) => setNewWorkout({ ...newWorkout, name: e.target.value })}
                    placeholder="Nama workout (e.g., Push-up, Jogging)"
                    className="input"
                    autoFocus
                  />
                  <div className="grid grid-cols-2 gap-3">
                    <input
                      type="number"
                      value={newWorkout.duration}
                      onChange={(e) => setNewWorkout({ ...newWorkout, duration: e.target.value })}
                      placeholder="Durasi (menit)"
                      className="input"
                    />
                    <input
                      type="number"
                      value={newWorkout.reps}
                      onChange={(e) => setNewWorkout({ ...newWorkout, reps: e.target.value })}
                      placeholder="Repetisi"
                      className="input"
                    />
                  </div>
                  <input
                    type="number"
                    value={newWorkout.sets}
                    onChange={(e) => setNewWorkout({ ...newWorkout, sets: e.target.value })}
                    placeholder="Set (opsional)"
                    className="input"
                  />
                  <div className="text-xs text-gray-500 p-2 bg-gray-50 rounded">
                    💡 Kalori akan dihitung otomatis berdasarkan jenis latihan dan berat badan Anda
                  </div>
                </div>
                <div className="flex space-x-3 mt-4">
                  <button 
                    onClick={editingWorkout ? updateWorkout : addWorkout} 
                    className="btn-primary flex-1"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {editingWorkout ? 'Update' : 'Add'} Workout
                  </button>
                  <button onClick={cancelEdit} className="btn-secondary">
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 🍎 CALORIE TRACKER */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-green-500 rounded-xl flex items-center justify-center">
              <Apple className="w-4 h-4 text-white" />
            </div>
            <div>
              <h2 className="card-title">Calorie Tracker</h2>
              <p className="text-xs text-gray-500">
                {calorieBalance > 0 ? `+${calorieBalance} surplus` : `${calorieBalance} defisit`}
              </p>
            </div>
          </div>
          <button
            onClick={() => setShowAddMeal(true)}
            className="btn-primary"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Meal
          </button>
        </div>

        {/* Recent Meals */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">Makanan Hari Ini</h4>
          <div className="space-y-2">
            {caloriesIn.slice(0, 3).map((meal, index) => (
              <div key={meal.id} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="text-sm font-medium text-gray-900">{meal.category}</span>
                  <p className="text-xs text-gray-600">{meal.description}</p>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium text-gray-900">{meal.amount} kcal</span>
                  <div className="flex items-center space-x-1">
                    <button
                      onClick={() => editMeal(meal)}
                      className="p-1 text-blue-500 hover:bg-blue-50 rounded transition-all duration-200"
                      title="Edit meal"
                    >
                      <Edit2 className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => deleteMeal(meal.id)}
                      className="p-1 text-red-500 hover:bg-red-50 rounded transition-all duration-200"
                      title="Delete meal"
                    >
                      <Trash2 className="w-3 h-3" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Calories Out from Workouts */}
        {caloriesOut.length > 0 && (
          <div className="mt-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">Kalori Terbakar Hari Ini</h4>
            <div className="space-y-2">
              {caloriesOut.map((entry, index) => (
                <div key={entry.id} className="flex items-center justify-between p-2 bg-orange-50 rounded-lg">
                  <div className="flex-1">
                    <span className="text-sm font-medium text-orange-900">{entry.category}</span>
                    <p className="text-xs text-orange-700">{entry.description}</p>
                    {entry.isAutoGenerated && (
                      <span className="text-xs text-orange-600">🤖 Otomatis</span>
                    )}
                  </div>
                  <span className="text-sm font-medium text-orange-900">{entry.amount} kcal</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Add/Edit Meal Modal */}
        {showAddMeal && (
          <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl shadow-xl max-w-md w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  {editingMeal ? 'Edit Meal' : 'Add Meal'}
                </h3>
                <div className="space-y-3">
                  <select
                    value={newMeal.category}
                    onChange={(e) => setNewMeal({ ...newMeal, category: e.target.value })}
                    className="input"
                  >
                    <option value="Sarapan">Sarapan</option>
                    <option value="Makan Siang">Makan Siang</option>
                    <option value="Makan Malam">Makan Malam</option>
                    <option value="Snack">Snack</option>
                  </select>
                  <input
                    type="text"
                    value={newMeal.description}
                    onChange={(e) => setNewMeal({ ...newMeal, description: e.target.value })}
                    placeholder="Deskripsi makanan"
                    className="input"
                  />
                  <input
                    type="number"
                    value={newMeal.amount}
                    onChange={(e) => setNewMeal({ ...newMeal, amount: e.target.value })}
                    placeholder="Kalori (kcal)"
                    className="input"
                  />
                </div>
                <div className="flex space-x-3 mt-4">
                  <button 
                    onClick={editingMeal ? updateMeal : addMeal} 
                    className="btn-primary flex-1"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {editingMeal ? 'Update' : 'Add'} Meal
                  </button>
                  <button onClick={cancelEdit} className="btn-secondary">
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* ⚖️ BODY PROGRESS CHART */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-purple-500 rounded-xl flex items-center justify-center">
              <Scale className="w-4 h-4 text-white" />
            </div>
            <h2 className="card-title">Body Progress Chart</h2>
          </div>
          <button
            onClick={() => setShowAddWeight(true)}
            className="btn-primary"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Weight Entry
          </button>
        </div>

        {/* Weight Chart Simulation */}
        <div className="mb-4 p-4 bg-gray-50 rounded-xl">
          <div className="flex items-center justify-between mb-3">
            <span className="text-sm font-medium text-gray-700">Berat Badan (7 hari terakhir)</span>
            <TrendingUp className="w-4 h-4 text-blue-600" />
          </div>
          
          {/* Simple Line Chart Representation */}
          <div className="h-32 flex items-end space-x-2">
            {weightEntries.slice(0, 7).reverse().map((entry, index) => {
              const height = ((entry.weight - 70) / 5) * 100; // Scale for visualization
              return (
                <div key={entry.id} className="flex-1 flex flex-col items-center">
                  <div 
                    className="w-full bg-blue-500 rounded-t-sm transition-all duration-500"
                    style={{ height: `${Math.max(height, 10)}%` }}
                  ></div>
                  <span className="text-xs text-gray-600 mt-1">{entry.weight}kg</span>
                  <span className="text-xs text-gray-500">{new Date(entry.date).getDate()}</span>
                </div>
              );
            })}
          </div>
        </div>

        {/* Weight Log */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">Log 7 Hari Terakhir</h4>
          <div className="space-y-2">
            {weightEntries.slice(0, 7).map((entry, index) => (
              <div key={entry.id} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="text-sm font-medium text-gray-900">{entry.weight} kg</span>
                  {entry.bodyFat && (
                    <span className="text-xs text-gray-600 ml-2">({entry.bodyFat}% fat)</span>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-xs text-gray-500">{new Date(entry.date).toLocaleDateString('id-ID')}</span>
                  <div className="flex items-center space-x-1">
                    <button
                      onClick={() => editWeight(entry)}
                      className="p-1 text-blue-500 hover:bg-blue-50 rounded transition-all duration-200"
                      title="Edit weight"
                    >
                      <Edit2 className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => deleteWeight(entry.id)}
                      className="p-1 text-red-500 hover:bg-red-50 rounded transition-all duration-200"
                      title="Delete weight"
                    >
                      <Trash2 className="w-3 h-3" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Add/Edit Weight Modal */}
        {showAddWeight && (
          <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl shadow-xl max-w-md w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  {editingWeight ? 'Edit Weight Entry' : 'Add Weight Entry'}
                </h3>
                <div className="space-y-3">
                  <input
                    type="number"
                    step="0.1"
                    value={newWeight.weight}
                    onChange={(e) => setNewWeight({ ...newWeight, weight: e.target.value })}
                    placeholder="Berat badan (kg)"
                    className="input"
                    autoFocus
                  />
                  <input
                    type="number"
                    step="0.1"
                    value={newWeight.bodyFat}
                    onChange={(e) => setNewWeight({ ...newWeight, bodyFat: e.target.value })}
                    placeholder="Body fat % (opsional)"
                    className="input"
                  />
                </div>
                <div className="flex space-x-3 mt-4">
                  <button 
                    onClick={editingWeight ? updateWeight : addWeight} 
                    className="btn-primary flex-1"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {editingWeight ? 'Update' : 'Save'} Entry
                  </button>
                  <button onClick={cancelEdit} className="btn-secondary">
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 🎯 FITNESS GOAL SUMMARY */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-orange-500 rounded-xl flex items-center justify-center">
              <Target className="w-4 h-4 text-white" />
            </div>
            <h2 className="card-title">Fitness Goal Summary</h2>
          </div>
          <button
            onClick={() => setShowEditGoal(true)}
            className="btn-secondary"
          >
            <Edit2 className="w-4 h-4 mr-2" />
            Edit Goal
          </button>
        </div>

        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="p-3 bg-blue-50 rounded-xl border border-blue-200">
            <div className="text-sm font-medium text-blue-700">Berat Target</div>
            <div className="text-xl font-bold text-blue-600">{fitnessGoal.targetWeight} kg</div>
          </div>
          <div className="p-3 bg-green-50 rounded-xl border border-green-200">
            <div className="text-sm font-medium text-green-700">Berat Saat Ini</div>
            <div className="text-xl font-bold text-green-600">{currentWeight} kg</div>
          </div>
          <div className="p-3 bg-purple-50 rounded-xl border border-purple-200">
            <div className="text-sm font-medium text-purple-700">Mode</div>
            <div className="text-sm font-bold text-purple-600 capitalize">{fitnessGoal.mode}</div>
          </div>
          <div className="p-3 bg-gray-50 rounded-xl border border-gray-200">
            <div className="text-sm font-medium text-gray-700">Update Terakhir</div>
            <div className="text-sm font-bold text-gray-600">
              {new Date(fitnessGoal.lastUpdate).toLocaleDateString('id-ID')}
            </div>
          </div>
        </div>

        {/* Edit Goal Modal */}
        {showEditGoal && (
          <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl shadow-xl max-w-md w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Edit Fitness Goal</h3>
                <div className="space-y-3">
                  <input
                    type="number"
                    step="0.1"
                    value={fitnessGoal.targetWeight}
                    onChange={(e) => setFitnessGoal({ ...fitnessGoal, targetWeight: parseFloat(e.target.value) || 0 })}
                    placeholder="Target weight (kg)"
                    className="input"
                  />
                  <select
                    value={fitnessGoal.mode}
                    onChange={(e) => setFitnessGoal({ ...fitnessGoal, mode: e.target.value as any })}
                    className="input"
                  >
                    <option value="cutting">Cutting (Turun berat)</option>
                    <option value="bulking">Bulking (Naik berat)</option>
                    <option value="maintenance">Maintenance (Pertahankan)</option>
                  </select>
                </div>
                <div className="flex space-x-3 mt-4">
                  <button onClick={updateGoal} className="btn-primary flex-1">
                    <Save className="w-4 h-4 mr-2" />
                    Update Goal
                  </button>
                  <button onClick={() => setShowEditGoal(false)} className="btn-secondary">
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 📊 STATISTICS RING */}
      <div className="card">
        <div className="card-header">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-indigo-500 rounded-xl flex items-center justify-center">
              <Activity className="w-4 h-4 text-white" />
            </div>
            <h2 className="card-title">Weekly Statistics</h2>
          </div>
        </div>

        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="stat-card stat-card-primary">
            <div className="stat-value">{currentWeight} kg</div>
            <div className="stat-label">Berat Terakhir</div>
          </div>
          <div className={`stat-card ${weightChange < 0 ? 'stat-card-success' : weightChange > 0 ? 'stat-card-error' : 'stat-card-warning'}`}>
            <div className="stat-value">
              {weightChange > 0 ? '+' : ''}{weightChange} kg
            </div>
            <div className="stat-label">Perubahan 7 Hari</div>
          </div>
          <div className="stat-card stat-card-success">
            <div className="stat-value">{weeklyWorkouts}</div>
            <div className="stat-label">Workout Selesai</div>
          </div>
          <div className={`stat-card ${calorieBalance > 0 ? 'stat-card-error' : 'stat-card-success'}`}>
            <div className="stat-value">
              {calorieBalance > 0 ? 'Surplus' : 'Defisit'}
            </div>
            <div className="stat-label">Status Kalori</div>
          </div>
        </div>
      </div>

      {/* Edit Profile Modal */}
      {showEditProfile && (
        <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl max-w-md w-full">
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Edit Profile</h3>
              <div className="space-y-3">
                <div className="grid grid-cols-2 gap-3">
                  <input
                    type="number"
                    value={userProfile.age}
                    onChange={(e) => setUserProfile({ ...userProfile, age: parseInt(e.target.value) || 0 })}
                    placeholder="Umur"
                    className="input"
                  />
                  <select
                    value={userProfile.gender}
                    onChange={(e) => setUserProfile({ ...userProfile, gender: e.target.value as 'male' | 'female' })}
                    className="input"
                  >
                    <option value="male">Laki-laki</option>
                    <option value="female">Perempuan</option>
                  </select>
                </div>
                <div className="grid grid-cols-2 gap-3">
                  <input
                    type="number"
                    value={userProfile.height}
                    onChange={(e) => setUserProfile({ ...userProfile, height: parseInt(e.target.value) || 0 })}
                    placeholder="Tinggi (cm)"
                    className="input"
                  />
                  <input
                    type="number"
                    step="0.1"
                    value={userProfile.weight}
                    onChange={(e) => setUserProfile({ ...userProfile, weight: parseFloat(e.target.value) || 0 })}
                    placeholder="Berat (kg)"
                    className="input"
                  />
                </div>
                <select
                  value={userProfile.activityLevel}
                  onChange={(e) => setUserProfile({ ...userProfile, activityLevel: e.target.value as any })}
                  className="input"
                >
                  <option value="sedentary">Sedentary (Tidak aktif)</option>
                  <option value="light">Light (Olahraga ringan 1-3x/minggu)</option>
                  <option value="moderate">Moderate (Olahraga sedang 3-5x/minggu)</option>
                  <option value="active">Active (Olahraga berat 6-7x/minggu)</option>
                  <option value="very_active">Very Active (Olahraga sangat berat)</option>
                </select>
              </div>
              <div className="flex space-x-3 mt-4">
                <button onClick={updateProfile} className="btn-primary flex-1">
                  <Save className="w-4 h-4 mr-2" />
                  Update Profile
                </button>
                <button onClick={() => setShowEditProfile(false)} className="btn-secondary">
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
      )}

      {/* Calorie Info Modal */}
      {showCalorieInfo && (
        <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl max-w-lg w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">Calorie Calculator Info</h3>
                <button
                  onClick={() => setShowCalorieInfo(false)}
                  className="p-1 text-gray-400 hover:text-gray-600"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              
              <div className="space-y-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">🔥 BMR (Basal Metabolic Rate)</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    Kalori yang dibutuhkan tubuh untuk fungsi dasar (bernapas, sirkulasi darah, dll) saat istirahat.
                  </p>
                  <div className="p-3 bg-blue-50 rounded-lg">
                    <p className="text-sm font-medium text-blue-900">BMR Anda: {calorieGoals.bmr} kcal/hari</p>
                    <p className="text-xs text-blue-700 mt-1">
                      Dihitung menggunakan rumus Mifflin-St Jeor berdasarkan umur, jenis kelamin, tinggi, dan berat badan.
                    </p>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">⚡ TDEE (Total Daily Energy Expenditure)</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    Total kalori yang dibakar dalam sehari termasuk aktivitas fisik.
                  </p>
                  <div className="p-3 bg-green-50 rounded-lg">
                    <p className="text-sm font-medium text-green-900">TDEE Anda: {calorieGoals.tdee} kcal/hari</p>
                    <p className="text-xs text-green-700 mt-1">
                      BMR × Activity Level ({userProfile.activityLevel})
                    </p>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">🎯 Target Kalori Harian</h4>
                  <div className="p-3 bg-purple-50 rounded-lg">
                    <p className="text-sm font-medium text-purple-900">Target: {calorieGoals.dailyCalorieGoal} kcal/hari</p>
                    <p className="text-xs text-purple-700 mt-1">
                      {fitnessGoal.mode === 'cutting' && 'TDEE - 500 kcal (defisit untuk turun berat)'}
                      {fitnessGoal.mode === 'bulking' && 'TDEE + 300 kcal (surplus untuk naik berat)'}
                      {fitnessGoal.mode === 'maintenance' && 'TDEE (pertahankan berat)'}
                    </p>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">💪 Kalori Terbakar dari Olahraga</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    Kalori dihitung otomatis berdasarkan jenis latihan dan disesuaikan dengan berat badan Anda.
                  </p>
                  <div className="space-y-2">
                    <div className="p-2 bg-gray-50 rounded text-xs">
                      <strong>Contoh (untuk berat {currentWeight}kg):</strong>
                      <ul className="mt-1 space-y-1">
                        <li>• Jogging 20 menit: ~{Math.round(10 * 20 * (currentWeight/70))} kcal</li>
                        <li>• Push-up 15 reps: ~{Math.round(0.5 * 15 * (currentWeight/70) * 10)/10} kcal</li>
                        <li>• Plank 60 detik: ~{Math.round(3 * 1 * (currentWeight/70))} kcal</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">📊 Makronutrien</h4>
                  <div className="grid grid-cols-3 gap-2 text-xs">
                    <div className="p-2 bg-red-50 rounded text-center">
                      <div className="font-medium text-red-900">{calorieGoals.proteinGoal}g</div>
                      <div className="text-red-700">Protein</div>
                    </div>
                    <div className="p-2 bg-yellow-50 rounded text-center">
                      <div className="font-medium text-yellow-900">{calorieGoals.carbGoal}g</div>
                      <div className="text-yellow-700">Karbo</div>
                    </div>
                    <div className="p-2 bg-blue-50 rounded text-center">
                      <div className="font-medium text-blue-900">{calorieGoals.fatGoal}g</div>
                      <div className="text-blue-700">Lemak</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BodyTracker;